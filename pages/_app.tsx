import '../styles/globals.css'
import type { AppProps } from 'next/app'
import React from 'react'
import { ChakraProvider, extendTheme } from '@chakra-ui/react'
import Head from 'next/head'
import Navbar from '@components/Navbar'
import Footer from '@components/Footer'
import { TronProvider } from '@components/TronProvider'
import { useEffect, useState } from 'react'

const theme = extendTheme({
  styles: {
    global: {
      'html,body': {
        backgroundColor: '#000113',
      },
      '*': {
        fontFamily: 'DM Sans',
        color: 'white',
        backgroundColor: 'transparent',
      },
      button: {
        backgroundColor: 'transparent !important',
        border: '1px solid gray',
        _hover: {
          border: '1px solid lightgray',
        },
      },
    },
  },
})
const { ethers } = require('ethers')

export const MyAppContext = React.createContext({
  account: undefined,
  setAccount: undefined,
  contract: undefined,
  setContract: undefined,
  provider: undefined,
  setProvider: undefined,
  signer: undefined,
  setSigner: undefined,
  allTasks: undefined,
  setAllTasks: undefined,
})

export default function App({ Component, pageProps, router }: AppProps) {
  const [mounted, setMounted] = useState(false)
  const [account, setAccount] = useState('')

  const [contract, setContract] = useState('')
  const [provider, setProvider] = useState('')
  const [signer, setSigner] = useState('')
  const [allTasks, setAllTasks] = useState('')

  console.log('NEW_contract', contract)

  // const [balance, setBalance] = useState('')

  useEffect(() => setMounted(true), [])
  if (!mounted) return null

  // const connectWallet = async () => {
  //   if (!window.ethereum) {
  //     console.log('please install MetaMask')
  //     return
  //   }
  //   const providerTemp = new ethers.providers.Web3Provider(window.ethereum)
  //   setProvider(providerTemp)
  //   const { chainId } = await providerTemp.getNetwork()
  //   console.log('here chainId', chainId)
  //   const deployedContract = '0x9c1a36E935476d60AafF158F68aC2cE815e07b3B'
  //   const signer = providerTemp.getSigner()
  //   setSigner(signer)

  //   if (chainId == '1001') {
  //     let d = new ethers.Contract(
  //       '0x9c1a36E935476d60AafF158F68aC2cE815e07b3B',
  //       ABI,
  //       signer,
  //     )
  //     setD(d)
  //     // OptimismGoerli_to_Mumbai
  //     let contract = new ethers.Contract(
  //       OptimismGoerli_to_Mumbai_Contract,
  //       OptimismGoerli_to_Mumbai_ABI,
  //       signer,
  //     )
  //     setContract(contract)
  //     setChainName('OptimismGoerli')
  //     setContract(contract)
  //     getAllBooks(contract)
  //     getAllTasks(d)
  //     setBackColor('#cb0404')
  //   } else {
  //     alert('Please connect to Klaynt Test Network!')
  //   }

  //   // MetaMask requires requesting permission to connect users accounts
  //   providerTemp
  //     .send('eth_requestAccounts', [])
  //     .then((accounts) => {
  //       if (accounts.length > 0) {
  //         setUser(accounts[0])
  //         // localStorage('currentAccount', accounts[0])
  //       }
  //     })
  //     .catch((e) => console.log(e))
  // }

  {
    /* // <ChakraProvider theme={theme}>
    //   <TronProvider>
    //     <Head>
    //       <title>Learning rewards: Tasks</title>
    //       <meta name="description" content="Generated by create next app" />
    //       <link rel="icon" href="/favicon.ico" />
    //     </Head>
    //     <Navbar />
    //     <Component
    //       {...pageProps}
    //       key={router.route}
    //     />
    //     <Footer />
    //   </TronProvider>
    // </ChakraProvider> */
  }
  console.log('allTasks', allTasks)

  return (
    <ChakraProvider theme={theme}>
      <MyAppContext.Provider
        value={{
          account,
          setAccount,
          contract,
          setContract,
          provider,
          setProvider,
          signer,
          setSigner,
          allTasks,
          setAllTasks,
        }}
      >
        <Head>
          <title>Learning rewards: Tasks</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Navbar account={account} />
        <Component {...pageProps} key={router.route} />
        <Footer />
      </MyAppContext.Provider>
    </ChakraProvider>
  )
}
